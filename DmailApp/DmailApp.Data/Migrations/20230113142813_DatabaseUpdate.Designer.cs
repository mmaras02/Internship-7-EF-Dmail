// <auto-generated />
using System;
using DmailApp.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DmailApp.Data.Migrations
{
    [DbContext(typeof(DmailAppDbContext))]
    [Migration("20230113142813_DatabaseUpdate")]
    partial class DatabaseUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DmailApp.Data.Entities.Models.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MailId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("EventDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MailType")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeOfSending")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mail_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MailId");

                    b.HasIndex("SenderId");

                    b.ToTable("Mails");

                    b.HasDiscriminator<string>("mail_type").HasValue("mail");

                    b.HasData(
                        new
                        {
                            MailId = 1,
                            Content = "Write your review for your stay!",
                            MailType = 0,
                            SenderId = 1,
                            TimeOfSending = new DateTime(2022, 3, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Airbnb"
                        },
                        new
                        {
                            MailId = 2,
                            Content = "Here are the notes i took today!",
                            MailType = 0,
                            SenderId = 4,
                            TimeOfSending = new DateTime(2022, 10, 2, 1, 11, 11, 0, DateTimeKind.Utc),
                            Title = "Notes from class"
                        },
                        new
                        {
                            MailId = 3,
                            Content = "Here are cheap flights i found:",
                            MailType = 0,
                            SenderId = 6,
                            TimeOfSending = new DateTime(2022, 9, 11, 9, 10, 0, 0, DateTimeKind.Utc),
                            Title = "Skyscanner"
                        },
                        new
                        {
                            MailId = 4,
                            Content = "Charge your phone before you leave!",
                            MailType = 0,
                            SenderId = 3,
                            TimeOfSending = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Reminder"
                        },
                        new
                        {
                            MailId = 5,
                            Content = "Here are my most listened artists this year: ...",
                            MailType = 0,
                            SenderId = 4,
                            TimeOfSending = new DateTime(2022, 11, 29, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Spotify"
                        },
                        new
                        {
                            MailId = 6,
                            EventDuration = new TimeSpan(1, 0, 0, 0, 0),
                            EventTime = new DateTime(2023, 1, 20, 15, 0, 0, 0, DateTimeKind.Utc),
                            MailType = 1,
                            SenderId = 2,
                            TimeOfSending = new DateTime(2022, 12, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Karaoke night"
                        },
                        new
                        {
                            MailId = 7,
                            EventDuration = new TimeSpan(1, 0, 0, 0, 0),
                            EventTime = new DateTime(2023, 2, 20, 16, 0, 0, 0, DateTimeKind.Utc),
                            MailType = 1,
                            SenderId = 5,
                            TimeOfSending = new DateTime(2022, 12, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Kate's Birthday"
                        },
                        new
                        {
                            MailId = 8,
                            EventDuration = new TimeSpan(0, 2, 0, 0, 0),
                            EventTime = new DateTime(2023, 1, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            MailType = 1,
                            SenderId = 2,
                            TimeOfSending = new DateTime(2023, 1, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Coffee date"
                        },
                        new
                        {
                            MailId = 9,
                            EventDuration = new TimeSpan(4, 0, 0, 0, 0),
                            EventTime = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            MailType = 1,
                            SenderId = 4,
                            TimeOfSending = new DateTime(2022, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "ConcertS in Italy"
                        });
                });

            modelBuilder.Entity("DmailApp.Data.Entities.Models.ReceiverMail", b =>
                {
                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("MailId")
                        .HasColumnType("integer");

                    b.Property<int?>("EventStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("MailStatus")
                        .HasColumnType("integer");

                    b.HasKey("ReceiverId", "MailId");

                    b.HasIndex("MailId");

                    b.ToTable("Recipients");

                    b.HasData(
                        new
                        {
                            ReceiverId = 3,
                            MailId = 3,
                            MailStatus = 0
                        },
                        new
                        {
                            ReceiverId = 4,
                            MailId = 2,
                            MailStatus = 1
                        },
                        new
                        {
                            ReceiverId = 2,
                            MailId = 1,
                            MailStatus = 0
                        },
                        new
                        {
                            ReceiverId = 1,
                            MailId = 6,
                            EventStatus = 1,
                            MailStatus = 0
                        },
                        new
                        {
                            ReceiverId = 3,
                            MailId = 7,
                            EventStatus = 2,
                            MailStatus = 1
                        },
                        new
                        {
                            ReceiverId = 6,
                            MailId = 8,
                            EventStatus = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            ReceiverId = 2,
                            MailId = 8,
                            EventStatus = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            ReceiverId = 2,
                            MailId = 9,
                            EventStatus = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            ReceiverId = 1,
                            MailId = 9,
                            EventStatus = 2,
                            MailStatus = 1
                        },
                        new
                        {
                            ReceiverId = 3,
                            MailId = 4,
                            MailStatus = 0
                        },
                        new
                        {
                            ReceiverId = 6,
                            MailId = 5,
                            MailStatus = 1
                        });
                });

            modelBuilder.Entity("DmailApp.Data.Entities.Models.SpamFlag", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("SpamUserId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "SpamUserId");

                    b.HasIndex("SpamUserId");

                    b.ToTable("SpamFlag");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            SpamUserId = 2
                        },
                        new
                        {
                            UserId = 1,
                            SpamUserId = 4
                        },
                        new
                        {
                            UserId = 2,
                            SpamUserId = 1
                        },
                        new
                        {
                            UserId = 3,
                            SpamUserId = 6
                        },
                        new
                        {
                            UserId = 4,
                            SpamUserId = 1
                        });
                });

            modelBuilder.Entity("DmailApp.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FailedLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("user_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("user_type").HasValue("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mate.matic@gmail.com",
                            FailedLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 177, 9, 243, 187, 188, 36, 78, 184, 36, 65, 145, 126, 208, 109, 97, 139, 144, 8, 221, 9, 179, 190, 253, 27, 94, 7, 57, 76, 112, 106, 139, 185, 128, 177, 215, 120, 94, 89, 118, 236, 4, 155, 70, 223, 95, 19, 38, 175, 90, 46, 166, 209, 3, 253, 7, 201, 83, 133, 255, 171, 12, 172, 188, 134 }
                        },
                        new
                        {
                            Id = 2,
                            Email = "zeljana.zekic@gmail.com",
                            FailedLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 76, 187, 208, 171, 143, 255, 143, 248, 125, 119, 85, 15, 51, 217, 88, 117, 68, 43, 61, 142, 111, 66, 179, 82, 121, 202, 7, 157, 91, 227, 87, 239, 48, 244, 140, 112, 96, 120, 144, 214, 21, 175, 193, 145, 92, 69, 93, 24, 206, 159, 64, 187, 5, 215, 7, 120, 111, 251, 188, 204, 44, 103, 3, 188 }
                        },
                        new
                        {
                            Id = 3,
                            Email = "anitamilic01@dump.com",
                            FailedLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 253, 231, 209, 108, 150, 177, 223, 16, 240, 116, 32, 63, 71, 4, 75, 136, 233, 186, 205, 125, 174, 214, 196, 130, 161, 33, 186, 159, 176, 180, 222, 227, 10, 16, 37, 80, 170, 124, 119, 177, 241, 195, 83, 141, 101, 152, 31, 15, 143, 135, 112, 181, 217, 83, 147, 42, 233, 158, 85, 95, 3, 50, 234, 253 }
                        },
                        new
                        {
                            Id = 4,
                            Email = "ivo.ivic@gmail.com",
                            FailedLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 85, 178, 150, 46, 60, 225, 189, 147, 48, 215, 44, 147, 3, 192, 221, 248, 52, 173, 47, 3, 141, 152, 109, 41, 99, 149, 241, 5, 165, 232, 199, 212, 129, 57, 33, 77, 79, 82, 254, 61, 179, 110, 49, 68, 178, 180, 77, 85, 113, 173, 179, 184, 252, 124, 33, 183, 183, 217, 139, 74, 68, 12, 103, 9 }
                        },
                        new
                        {
                            Id = 5,
                            Email = "marko.caric@dump.com",
                            FailedLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 177, 9, 243, 187, 188, 36, 78, 184, 36, 65, 145, 126, 208, 109, 97, 139, 144, 8, 221, 9, 179, 190, 253, 27, 94, 7, 57, 76, 112, 106, 139, 185, 128, 177, 215, 120, 94, 89, 118, 236, 4, 155, 70, 223, 95, 19, 38, 175, 90, 46, 166, 209, 3, 253, 7, 201, 83, 133, 255, 171, 12, 172, 188, 134 }
                        },
                        new
                        {
                            Id = 6,
                            Email = "kate.bulj@gmail.com",
                            FailedLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 177, 9, 243, 187, 188, 36, 78, 184, 36, 65, 145, 126, 208, 109, 97, 139, 144, 8, 221, 9, 179, 190, 253, 27, 94, 7, 57, 76, 112, 106, 139, 185, 128, 177, 215, 120, 94, 89, 118, 236, 4, 155, 70, 223, 95, 19, 38, 175, 90, 46, 166, 209, 3, 253, 7, 201, 83, 133, 255, 171, 12, 172, 188, 134 }
                        });
                });

            modelBuilder.Entity("DmailApp.Data.Entities.Models.Mail", b =>
                {
                    b.HasOne("DmailApp.Data.Entities.Models.User", "Sender")
                        .WithMany("SentMail")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DmailApp.Data.Entities.Models.ReceiverMail", b =>
                {
                    b.HasOne("DmailApp.Data.Entities.Models.Mail", "Mail")
                        .WithMany("Recipients")
                        .HasForeignKey("MailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmailApp.Data.Entities.Models.User", "Receiver")
                        .WithMany("ReceivedMail")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mail");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("DmailApp.Data.Entities.Models.SpamFlag", b =>
                {
                    b.HasOne("DmailApp.Data.Entities.Models.User", "SpamUser")
                        .WithMany()
                        .HasForeignKey("SpamUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmailApp.Data.Entities.Models.User", "User")
                        .WithMany("SpamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpamUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmailApp.Data.Entities.Models.Mail", b =>
                {
                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("DmailApp.Data.Entities.Models.User", b =>
                {
                    b.Navigation("ReceivedMail");

                    b.Navigation("SentMail");

                    b.Navigation("SpamUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
